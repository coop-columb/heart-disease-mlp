name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov black isort flake8

    - name: Lint with flake8
      run: |
        flake8 src api tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src api tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check src api tests

    - name: Check imports with isort
      run: |
        isort --check-only --profile black src api tests

    - name: Download and process data
      run: |
        mkdir -p data/raw data/processed models/optuna
        # Try to download data if it's not already present
        python -m src.data.download_data || echo "Data download failed, tests will use synthetic data"
        # Process data if available
        python -m src.data.make_dataset || echo "Data processing failed, tests will use synthetic data"

    - name: Run unit tests
      run: |
        pytest --cov=src --cov=api tests/test_data.py tests/test_models.py tests/test_api.py -v

    - name: Run integration tests
      run: |
        # Run more intensive integration tests
        pytest tests/test_api_integration.py -v --skip-slow

    - name: Run model performance tests
      run: |
        # Run model performance tests if models are available
        python -c "import os; os.makedirs('models', exist_ok=True)"
        pytest tests/test_model_performance.py -v --skip-slow || echo "Model performance tests skipped - models not available"

    - name: Generate coverage report
      run: |
        pytest --cov=src --cov=api --cov-report=xml

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-and-test-docker:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true
        tags: heart-disease-mlp:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Docker container for testing
      run: |
        docker run -d -p 8000:8000 --name heart-disease-test heart-disease-mlp:test
        sleep 10  # Give container time to start

    - name: Check container health
      run: |
        docker ps
        docker logs heart-disease-test
        curl -s http://localhost:8000/health || echo "Health check failed"

    - name: Run Docker tests
      run: |
        # Run Docker-specific tests
        pytest tests/test_docker.py -v || echo "Docker tests completed with issues"

    - name: Clean up Docker container
      if: always()
      run: |
        docker stop heart-disease-test || true
        docker rm heart-disease-test || true

  build-and-push:
    needs: build-and-test-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/heart-disease-mlp:latest
          ghcr.io/${{ github.repository_owner }}/heart-disease-mlp:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository_owner }}/heart-disease-mlp:${{ github.sha }}
        format: 'table'
        exit-code: '0'  # Don't fail the build, just report

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Uncomment the next line after creating the 'staging' environment in GitHub repository settings
    # environment: staging

    steps:
    - uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to staging server
      env:
        CONTAINER_IMAGE: ghcr.io/${{ github.repository_owner }}/heart-disease-mlp:${{ github.sha }}
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      run: |
        # Create deployment script
        cat > deploy.sh <<EOL
        #!/bin/bash
        cd ~/heart-disease-mlp || exit

        # Pull the new image
        docker pull ${CONTAINER_IMAGE}

        # Update docker-compose.yml file to use the new image
        sed -i "s|image: .*|image: ${CONTAINER_IMAGE}|g" docker-compose.yml

        # Restart the service
        docker-compose down
        docker-compose up -d

        # Cleanup old images
        docker image prune -f
        EOL

        # Copy the script and execute
        chmod +x deploy.sh
        scp -o StrictHostKeyChecking=no deploy.sh ${DEPLOY_USER}@${DEPLOY_HOST}:~/deploy.sh
        ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} "chmod +x ~/deploy.sh && ~/deploy.sh"

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Uncomment the next line after creating the 'production' environment in GitHub repository settings
    # environment: production

    steps:
    - name: Manual approval for production deployment
      run: echo "This step represents a manual approval for production deployment"

    - uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to production server
      env:
        CONTAINER_IMAGE: ghcr.io/${{ github.repository_owner }}/heart-disease-mlp:${{ github.sha }}
        DEPLOY_HOST: ${{ secrets.PROD_DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.PROD_DEPLOY_USER }}
      run: |
        # Create deployment script
        cat > deploy.sh <<EOL
        #!/bin/bash
        cd ~/heart-disease-mlp || exit

        # Pull the new image
        docker pull ${CONTAINER_IMAGE}

        # Update docker-compose.yml file to use the new image
        sed -i "s|image: .*|image: ${CONTAINER_IMAGE}|g" docker-compose.yml

        # Restart the service
        docker-compose down
        docker-compose up -d

        # Cleanup old images
        docker image prune -f
        EOL

        # Copy the script and execute
        chmod +x deploy.sh
        scp -o StrictHostKeyChecking=no deploy.sh ${DEPLOY_USER}@${DEPLOY_HOST}:~/deploy.sh
        ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} "chmod +x ~/deploy.sh && ~/deploy.sh"
